.. -*- coding: utf-8 -*-

=========================================
Computergestützte Mathematik zur Analysis
=========================================

-------------------------------------------------------------------
Übersicht über die verwendeten Befehle, nach Lektionen geordnet
-------------------------------------------------------------------

.. contents:: Inhaltsverzeichnis
              :backlinks: none

Lektion 1
*********

initialer Import
================

+     ``from sympy import *``

      Import der Bibliothek

+     ``init_printing()``

      Einschalten der aufgehübschten Ausgabe

      
Arithmetik
==========

+     Befehle werden mit ``;``
      oder ``:`` abgeschlossen.  Im
      ersten Fall wird das Ergebnis angezeigt, im zweiten nicht.  
      Zeilenende impliziert ``;``

+     ``+, -, *, /, **``

      arithmetische Operatoren


Symbolische Rechnung
====================

+     ``=``

      Zuweisung

+     ``==``

      Vergleichsoperator (später)

+     ``Rational``
	    
      rationale Zahl (im Gegensatz zur Fließkommazahl)

beliebig genaue Fließkommazahlen
================================

+     ``pi``

      Kreiszahl 

+     ``N''
	    
      numerische Auswertung (Funktion) siehe auch in `bestimmte Integrale`_

+     ``print``

      einfache Ausgabe

      

Sympyfizierungen
================

+     ``S``

      verwandelt allgemeines Python-Objekt in ``sympy``-Objekt, falls
      das sinnvoll ist

+     ``type``

      Typ eines Ausdrucks



Symbole
=======

+     ``x = S('x')``

      Einrichtung eines Symbols

+     ``x = Symbol('x')``

      alternative, siehe auch unter Annahmen_


elementare Funktionen
=====================

+     ``sqrt``

      Quadratwurzel

+     ``sin, cos, tan, cot``

      trigonometrische Funktionen

+     ``asin, acos, atan, acot``

      inverse trigonometrische Funktionen

..      ``arctan`` siehe auch in `Der Arcustangens`_

+     ``log, ln``

      natürlicher Logarithmus

+     ``exp``

      Exponentialfunktion

+     ``abs``

      Absolutbetrag	    

+     ``?``

      Hilfe zu einem Befehl	    
      
zurück zum Inhaltsverzeichnis_



Lektion 2
*********

Vereinfachungen
===============

+ ``expand``

  Ausmultiplikation (Methode und Funktion)

+ ``factor``
  
  Faktorisierung von Polynomen (Methode und Funktion)

+ ``ratsimp``

  Vereinfachung von Brüchen (Methode und Funktion)

+ ``trigsimp``

  Vereinfachung trigonometrischer Ausdrücke (Methode und Funktion)

+ ``simplify``

  alle sinnvollen Vereinfachungen (Methode und Funktion)
  
Auswertung von Ausdrücken
=========================

+ ``subs``

  Ersetzung eines Teilausdrucks (Methode)

Grenzwerte
==========

+ ``limit``

  Grenzwert (Methode und Funktion)

+ ``Limit``

  träger Grenzwert (Funktion)

+ ``doit``

  Ausführung einer trägen Ausdrucks (Methode)

+ ``factorial``

  Fakultät

Ableitungen
===========

+ ``diff``

  Ableitung (Methode und Funktion)

+ ``numer``

  Zähler (Funktion)

+ ``denom``

  Nenner (Funktion)

unbestimmte Integrale
=====================

+ ``integrate``

  Integral (Methode und Funktion) siehe auch `bestimmte Integrale`_

bestimmte Integrale
===================

+ ``integrate``

  Integral (Methode und Funktion) siehe auch `unbestimmte Integrale`_

+ ``Integral``

  träger Operator (Funktion)

+ ``n``

  numerische Auswertung (Methode) siehe auch in `beliebig genaue Fließkommazahlen`_


zurück zum Inhaltsverzeichnis_

Lektion 3
*********

Annahmen
========

+ ``Symbol('x', positive=True)``

das Symbol wird als positiv vereinbart

andere gebräuchliche Annahmen

  *  ``negative``, ``nonpositive``, ``nonnegative`` Annahmen über das Vorzeichen

  *  ``integer``, ``even``, ``odd`` Annahmen über ganze Zahlen

  *  ``commutative`` Annahme über Vertauschbarkeit

+ ``_assumptions``

  Zeigt die zu einem Objekt vereinbarten Annahmen (Attribut)

Summen und Reihen
=================

+ ``Sum``

  träger Summenoperator (es gibt keinen aktiven, Auswertung mit doit)

+ ``args``

  Liste der Argumente einer Funktion (Attribut)

Sympy rechnet komplex
=====================

+ ``re``

  Realteil

+ ``im``

  Imaginärteil

numpy Funktionen
================

* ``import numpy as np``

  Bibliothek numerischer Grundfunktionen

* ``np.linspace``

  Vektor aus gleichmäßig in einem Intervall verteilten Punkten

* ``np.sin``, ``np.cos``, ``np.exp``, ``np.arctan``, ...

  numpy-Versionen der elementaren Funktionen 

Verwandlung von Ausdrücken in numpy-Funktionen
==============================================

* ``lambdify``

Funktionsgraphen
================

* plot

  2D-Graphen unter ``sympy``

  Gebräuchliche Methoden: ``extend``, ``line_color``, ``legend``, ``show``

Funktionsgraphen sind Numerik
=============================

* ``import matplotlib.pyplot as plt``
  
  Zeichenbibliothek zu numpy

* ``%matplotlib notebook``

  interaktiver Grafikmodus

* ``%matplotlib inline``

  Standard-Grafikmodus

* ``plt.plot``

  2D-Graphen unter ``matplotlib``

* ``plt.legend``

  Die Labels werden angezeigt

* ``plt.figure``

  neues Bild wird angelegt

* ``plt.axis``

  Minimal- und maximalwerte für die Achsen

* ``plt.title``

  Überschrift

Index Tricks
============

Hier wird erklärt, wie man mit Hilfe eines boolschen Arrays auf einen Teil eines Arrays zugreift

3D Graphen
==========

* ``from sympy.plotting import plot3d``

* ``plot3d``

  3D-Graphen unter ``sympy``

zurück zum Inhaltsverzeichnis_

Lektion 4
*********

3D Graphen in matplotlib
========================

* ``np.meshgrid``

  erzeugt 2d-array aus zwei 1d-array

* ``from mpl_toolkits import Axes3D``

  Das muss man machen, obwohl Axes3D nicht direkt verwendet wird

* ``fig.add_subplot(111, projection='3d')``

  erzeugt eine Achse, d.h. ein Koordinatensystem
  dabei ist ``fig`` eine ``plt.figure`` (siehe `Funktionsgraphen sind Numerik`_)

* ``ax.plot_surface``

  3d-Graph, dabei ist ``ax`` eine Achse wie im vorigen Befehl

* ``ax.plot_wireframe``

  wie plot_surface, aber als Drahtmodell

* ``ax.view_init``

  Blickwinkel

* ``ax.set_zticks``

  Markierungen an der z-Achse (set_xticks, set_yticks genauso)

Beschränkungen der Höhe
=======================

* ``np.minimum``

  elementweises Minimum von zwei arrays (

* ``from matplotlib.colors import Normalize``

  Hilfsfunktion für die automtische Färbung

Listen, Tupel und Mengen
========================

* ``symbols``

  mehrere Symbole auf einmal

* ``set``

  Menge

* ``list``

  Liste

* ``tuple``

  Tupel

List and dictionary comprehension
=================================

* ``np.arange(n)``

  array von 0 bis n-1

* ``np.array``

  Verwandlung von Liste in array

Lösen von Gleichungen
=====================

* ``Eq``

  Gleichung

* ``solve``

  Lösung einer Gleichung oder eines Gleichungssystems, funktioniert auch mit UNgleichungen

zurück zum Inhaltsverzeichnis_

Lektion 5
*********

Graphen von Lösungsmengen
=========================

* ``plt.contour``

  2D-Plot von Höhenlinien

* ``plt.axis('equal')``

  Gleiche Maßstäbe auf beiden Achsen

Polynomgleichungen
==================

* ``CRootOf``

  Darstellung einer Nullstelle eines Polynoms

* ``roots``

  Spezieller Gleichungslöser für Polynome

Numerische Lösung von Gleichungen
=================================

* ``nsolve``

  numerische Lösung von Gleichungen 

Paremeterabhängige Gleichungen
==============================

* ``LambertW``

  spezielle Funktion

Reihenentwicklungen
===================

* ``series``

  Reihenentwicklung

* ``O``

  groß-O-Term einer Reihenentwicklung

* ``.removeO``

  Entfernung des groß-O-Terms (Methode bei Reihenentwicklungen)

zurück zum Inhaltsverzeichnis_

Lektion 6
*********

Schleifen
=========

* ``for``

  Schleife (Blöcke werden durch Einrückung erklärt)

* ``range``

  konsekutive Foleg von ganzen Zahlen (wie ``np.arange``, aber als Liste)

``if/elif/else``
================

* ``if``, ``elif``, ``else``

  Verzweigungen

* ``from IPython.display import display``
  ``display``

  formatierte Ausgabe 
  
Mehrere Zeichnungen in einem Bild
=================================

* ``fig.add_subplot(`` *ijk* ``)``

  fügt das *k*-te Bild in einer *i*x*k*-Matrix von Bildern ein (Methode)

* ``plt.xticks``

  Markierungen an der *x*-Achse, dito für ``plt.yticks`` (Funktion)

* ``fig.savefig`` 

  Bild abspeichern (Methode)

* ``from IPython.display import Image``
  ``Image``

  Bild aus dem Speicher anzeigen

Funktion
========

* ``def``

  Funktionsdefinition

* ``return``

  Rückgabewert

Zusammenfassen
==============

* ``collect``

  Terme zusammenfassen (Funktion, auch als Methode)

* ``rcollect``

  Terme rekursiv zusammenfassen

benutzerspezifische trigonometrische Vereinfachungen
====================================================

* ``trigsimp(method='fu', measure=``*my.measure*``)``

  trigonometrische Umwandlung, dabei wird die durch *my_measure* angegebene Bewertung minimiert (Funktion oder Methode)

* ``.count_ops(visual=True)``

  Anzahlen von Operatoren, aufgeschlüsselt nach Art

Potenzfunktionen
================

* ``sign``

  Signumfunktion


----------------------

© 2016 `Rüdiger Braun`_

zurück zum Inhaltsverzeichnis_

.. _`Rüdiger Braun`: mailto:Ruediger.Braun@uni-duesseldorf.de
